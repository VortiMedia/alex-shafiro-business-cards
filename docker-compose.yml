version: '3.8'

services:
  # FastAPI Web Application
  app:
    build:
      context: .
      target: production
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://bcg_user:bcg_password@postgres:5432/business_cards
      - CELERY_BROKER_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./output:/app/output
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network

  # Development version with hot reload
  app-dev:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://bcg_user:bcg_password@postgres:5432/business_cards
      - CELERY_BROKER_URL=redis://redis:6379
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - ./output:/app/output
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - development

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL database (optional - for job tracking)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=business_cards
      - POSTGRES_USER=bcg_user
      - POSTGRES_PASSWORD=bcg_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - app-network

  # Celery worker for background tasks
  worker:
    build:
      context: .
      target: production
    command: celery -A src.celery_app worker --loglevel=info
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://bcg_user:bcg_password@postgres:5432/business_cards
      - CELERY_BROKER_URL=redis://redis:6379
    volumes:
      - ./output:/app/output
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network

  # Celery beat for scheduled tasks
  beat:
    build:
      context: .
      target: production
    command: celery -A src.celery_app beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://bcg_user:bcg_password@postgres:5432/business_cards
      - CELERY_BROKER_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge